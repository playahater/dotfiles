servers = (
  {
    address = "irc.freenode.net";
    chatnet = "fnode";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "localhost";
    chatnet = "Bitlbee";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    password = "supersonic5";
    autoconnect = "yes";
  }
);

chatnets = {

  Bitlbee = {
    type = "IRC";
    autosendcmd = "/msg &bitlbee identify soska";

  };
  fnode = {
    type = "IRC";
    max_kicks = "4";
    max_modes = "3";
    max_msgs = "5";
    max_whois = "4";
  };
};

channels = (
  { name = "#drupal"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#drupal-sr"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#drupal-themes"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#drupal-views"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#drupal-support"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#xmonad"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#gentoo"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#android"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#openmoko"; chatnet = "fnode"; autojoin = "No"; },
  { name = "#pfsense"; chatnet = "fnode"; autojoin = "No"; },
  {
    name = "&bitlbee";
    chatnet = "Bitlbee";
    password = "supersonic5";
    autojoin = "Yes";
  }
);

aliases = {
  j = "join";
  wjoin = "join -window";
  wquery = "query -window";
  leave = "part";
  exit = "quit";
  date = "time";
  host = "userhost";
  last = "lastlog";
  say = "msg *";
  wi = "whois";
  wii = "whois $0 $0";
  ww = "whowas";
  w = "who";
  n = "names";
  m = "msg";
  t = "topic";
  c = "clear";
  cl = "clear";
  cls = "clear";
  k = "kick";
  kb = "kickban";
  b = "ban";
  ub = "unban";
  ig = "ignore";
  unig = "unignore";
  sb = "scrollback";
  wc = "window close";
  wn = "window new hide";
  goto = "sb goto";
  chat = "dcc chat";
  run = "script load";
  uptime = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  calc = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  invlist = "mode $C +I";
  q = "query";
  ak = "amarok";
  ec = "window close";
  em = "me";
  nixk = "nick";
  mw = "me";
  mne = "me";
  wm = "window move";
  awat = "away";
  nme = "me";
  afk = "me afk: abducted by aliens";
  awk = "me afk: Out of my mind. back in 5 minutes.";
  uc = "statusbar window add usercount";
  nact = "statusbar window add nact";
  slap = "me slaps $0 around a bit with a 'Get a Life' HOWTO";
  bslap = "me slaps $0 around with a small 50lb Unix Manual";
  netiq = "say ?rfc1855  ( http://www.hr-netiquette.org/pravila/ )";
  hrtfm = "msg $C $0: http://www.science.uva.nl/~mes/jargon/r/rtfm.html";
  rtfm = "msg $C $0: http://gentoo-wiki.com/HOWTO_Read_The_Fine_Manual_(RTFM)";
  guglet = "msg $C $0: http://www.michael-prokop.at/google.png";
  gugl = "msg $C $0: http://www.google.com";
};

completions = {
  ":9" = { value = ":)"; auto = "yes"; };
  ".)" = { value = ":)"; auto = "yes"; };
  ".-9" = { value = ":)"; auto = "yes"; };
  ":-9" = { value = ":)"; auto = "yes"; };
  ".-)" = { value = ":)"; auto = "yes"; };
  ".9" = { value = ":)"; auto = "yes"; };
  ":=" = { value = ":)"; auto = "yes"; };
  ":-=" = { value = ":)"; auto = "yes"; };
  ";9" = { value = ";)"; auto = "yes"; };
  ",)" = { value = ";)"; auto = "yes"; };
  ",-9" = { value = ";)"; auto = "yes"; };
  ";-9" = { value = ";)"; auto = "yes"; };
  ",-)" = { value = ";)"; auto = "yes"; };
  ",9" = { value = ";)"; auto = "yes"; };
  ";=" = { value = ";)"; auto = "yes"; };
  ";-=" = { value = ";)"; auto = "yes"; };
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " ";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
        usercount = { };
        #        nact = { };
        #       mail = { };
        typing_notice = { };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "always";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "playahater";
    user_name = "playahater";
    nick = "playahater";
    recode_autodetect_utf8 = "yes";
    settings_autosave = "on";
    awaylog_file = "~/.irssi/irclogs/away.log";
    awaylog_level = "msgs hilight";
    log_create_mode = "600";

    timestamp_format = "%H:%M:%S";
  };

  "fe-common/core" = {
    theme = "ninja";
    timestamps = "yes";
    autocreate_own_query = "yes";
    autocreate_query_level = "MSGS";
    use_status_window = "no";
    use_msgs_window = "yes";
    autolog = "yes";
    autolog_path = "~/.irssi/irclogs/$tag/$0.log";
    emphasis_multiword = "on";
    emphasis_replace = "on";
    autoclose_windows = "on";
    hide_server_tags = "on";
    show_own_nickchange_once = "on";
    term_charset = "utf-8";
    bell_beeps = "yes";
    beep_msg_level = "MSGS NOTICES DCC DCCMSGS HILIGHT";
    autoclose_query = "86400";
    beep_when_away = "yes";
    autocreate_windows = "yes";
    hide_text_style = "no";
  };

  "irc/core" = {
    alternate_nick = "playahater";
    ctcp_version_reply = "irssi v$J ($sysname)";
    ctcp_userinfo_reply = "$Y ($X)";
  };

  "fe-text" = {
    colors = "yes";
    term_force_colors = "yes";
    actlist_sort = "refnum";
    indent_always = "no";
    scrollback_lines = "2000";
  };

  "perl/core/scripts" = {
    awl_display_key = "$Q%K|%n$H$C$S";
    awl_block = "-15";
    first_away_message = "I can rise and shine. But not at the same time.";
    second_away_message = "I'm ready to listen. Are you ready to think?";
    first_away_timeout = "600";
    second_away_timeout = "3600";
  };
};

hilights = (
  { text = "playahater"; nick = "yes"; word = "yes"; },
  { text = "nick"; nick = "yes"; word = "yes"; }
);

logs = { };

ignores = (
  { mask = "rilix"; level = "ALL"; },
  { mask = "sysms"; level = "ALL"; },
  { mask = "N`Deflector"; level = "ALL"; },
  { mask = "Manson23"; level = "ALL"; },
  { mask = "rico"; level = "ALL"; },
  { level = "JOINS QUITS"; channels = ( "##slackware" ); },
  { level = "JOINS QUITS"; channels = ( "#archlinux" ); }
);

windows = { 1 = { immortal = "yes"; name = "(status)"; level = "ALL"; }; };
